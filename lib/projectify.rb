require 'fileutils'
require 'net/http'
require 'openssl'
require 'uri'
require 'colorize'
require 'logging'

class Projectify
  def initialize(debug_value, parameters, path)
    debugs = debug_value
    @logs = Logging.new(debugs)
    # The parameters passed to projectify.
    @parameters = parameters
    # The path to build the project in.
    @path = path
    # The path to temporarily store the extra files in.
    @extra_files = 'extra-files'
  end
  ###############
  #
  # Sets up deployment files.
  #
  ###############
  def setup_deploy(type)
    result = false
    if type == "drupal"
      output = `didify #{@path}`
      result = output.include? 'didified'
    else
      output = `capify #{@path}`
      result = output.include? 'capified'
    end

    self.parse_files(@path)

    return result
  end

  def create_structure(value)
    ###################
    #
    # This function allows you to add a directory to your repository
    #
    #
    #
    ###################
    if FileUtils.mkdir_p(value)
      output = `cd #{value};touch readme.md`
      return true
    else
      return false
    end
  end

  def fetch_projectify_extra_files_skeleton(user, repository)
    target_path = "#{@path}/#{@extra_files}"
    result = self.github_clone_latest_release(user, repository, target_path)

    if result?
      self.parse_files(target_path)
      self.merge_files(target_path, @path)
      FileUtils.rm_rf(target_path);
    end
  end

  def replace_placeholders(data)
    new_data = data.clone
    new_data.gsub!(/PROJECT_NAME/, @parameters[:project_name])
    new_data.gsub!(/PROJECT_DOMAIN/, @parameters[:site_host])
    new_data.gsub!(/SITE_NAME/, @parameters[:site_name])
    new_data.gsub!(/SITE_HOST/, @parameters[:site_host])
    return new_data;
  end

  # Replaces file contents and names with the placeholders.
  def parse_files(parse_path)
    self.get_tree(parse_path).sort.each do |entry|
      renamed_entry = self.replace_placeholders(entry)
      File.rename(entry, renamed_entry)

      if File.file?(renamed_entry)
        data = self.replace_placeholders(File.read(renamed_entry))
        File.open(renamed_entry, "w") {|file| file.puts data }
      else
        # Handle subdirectories recursively.
        self.parse_files(renamed_entry)
      end
    end
  end

  def merge_files(from, to)
    FileUtils.cp_r(self.get_tree(from), to)
    FileUtils.rm_rf(from)
  end

  ##
   # Symlink the default site directory to the site directory generated by
   # projectify.
  ##
  def symlink_site_directory()
    default_site_dir = "#{@path}/docroot/sites/default"
    site_dir = "#{@path}/docroot/sites/#{@parameters[:project_name]}"

    if Dir.exists? default_site_dir
      FileUtils.rm_rf(default_site_dir)
    end

    if Dir.exists? site_dir
      system("cd #{@path}/docroot/sites && ln -s #{@parameters[:project_name]} default")
    end
  end

  def drush_make()
    @logs.Debug("cd #{@path} && drush make #{@parameters[:project_name]}.make drupal --concurrency=5")
    system("cd  #{@path} && drush make #{@parameters[:project_name]}.make drupal --concurrency=5")
    if File.file?("#{@path}/drupal/.gitignore")
      system("cd  #{@path} && rm drupal/.gitignore")
    end
    self.merge_files 'drupal/.', 'docroot'

    if $?.success?
      @logs.Success("Drush make succeeded")
    else
      @logs.Error("Drush make failed")
    end
  end

  def get_tree(dir)
    return Dir.glob("#{dir}/*", File::FNM_DOTMATCH) - ["#{dir}/.", "#{dir}/.."]
  end

  def github_fetch_latest_release_tag(user, repository)
    request = Net::HTTP.get_response("https://api.github.com/repos/#{user}/#{repository}/releases/latest")
    result = JSON.parse(request.body)

    if result.tag_name
      return result.tag_name
    end

    return false
  end

  def github_clone_latest_release(user, repository, target_path)
    latest_release = self.github_fetch_latest_release_tag(user, repository)
    self.run("git clone git@github.com:#{user}/#{repository} --depth=1 --tag=#{latest_release} #{target_path}")
    if $?.success?
      FileUtils.rm_rf("#{target_path}/.git")
      return true
    end
    return false
  end

  def create_vagrant_files(user, repository)
    if Dir.exist? @path
      result = self.github_clone_latest_release(user, repository, "#{@path}/vagrant")

      if result?
        settings_path = "#{@path}/vagrant/local.vagrant.settings.json"
        FileUtils.cp("#{@path}/vagrant/example.vagrant.settings.json", settings_path)
        data = self.replace_placeholders(File.read(settings_path))
        File.open(settings_path, "w") {|file| file.puts data }
        @logs.Success("Correctly copied the settings file to settings.json.")

        return true
      end
    end

    return false
  end

  def create_boilerplate_theme(user, repository)
    theme_dir = "#{@path}/docroot/sites/#{@parameters[:project_name]}/themes/custom"
    boilerplate_theme_dir = "#{theme_dir}/#{@parameters[:project_name]}_omega"

    self.run("mkdir -p #{theme_dir}")
    result = self.github_clone_latest_release(user, repository, boilerplate_theme_dir)

    if result?
      FileUtils.mv("#{boilerplate_theme_dir}/ocelot.info", "#{boilerplate_theme_dir}/#{@parameters[:project_name]}_omega.info")
      @logs.Success("Set up the theme in #{theme_dir}/#{@parameters[:project_name]}_omega")
      return true
    end

    return false
  end

  def run(command)
    @logs.Debug(command)
    system(command)
  end
end
