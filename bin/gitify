#!/usr/bin/env ruby
require 'optparse'
require 'fileutils'
require "net/http"
require "uri"
require "json"
require 'colorize'
require 'buildserver'

options = {}
namespace_id = 0

###################
#
# We will parse all possible options in the following block of code
#
###################

OptionParser.new do |opts|
  opts.banner = "Usage: gitify [options]"

  opts.on("-n", "--project_name=PROJECT_NAME", "Define the project name for your project. If this is empty, \"CrossCheck\" will be used.") do |project_name|
    options[:project_name] = project_name
  end

  opts.on("-d", "--domain=LOCALDOMAIN", "Define the local development domain for this project. If this is empty, PROJECTNAME.dev will be used.") do |domain|
    options[:domain] = domain
  end

  opts.on("-n", "--namespace=NAMESPACE", "Define the namespace of the repository. if this is empty, no namespace will be used.") do |namespace|
    options[:namespace] = namespace
  end

  opts.on("-a", "--all", "Provision all branches. (master, acc, staging, prod)") do |all|
        options[:all] = all
  end

  opts.on("-br", "--branches=BRANCHES", "Branches split by a ,") do |branches|
        options[:branches] = branches
  end

  opts.on("-p", "--projecttype=TYPE", "Type: drupal(didi) or general (capistrano)") do |type|
      options[:type] = type
  end

  opts.on("-t", "--gitlab_token=TOKEN", "The private gitlab token") do |token|
    options[:token] = token
  end

  opts.on("-u", "--gitlab_domain=DOMAIN", "The url to your gitlab installation") do |url|
    options[:gitlab_url] = url
  end

  opts.on("-B", "--build_server_ip=IP", "IP of the build server. (Mandatory!)") do |build_server_ip|
    options[:build_server_ip] = build_server_ip
  end

  opts.on("-U", "--build_server_user=USER", "User for the build server. (Mandatory!)") do |build_server_user|
    options[:build_server_user] = build_server_user
  end

  opts.on("-P", "--build_server_password=PASSWORD", "Password for the build server. (Mandatory!)") do |build_server_password|
    options[:build_server_password] = build_server_password
  end

  opts.on("-N", "--notifier=NOTIFIEREMAIL", "The email of the person that has to be notified upon failed jobs.") do |notifier_email|
    options[:notifier_email] = notifier_email
  end

  opts.on("-v", "--verbose=TRUE/FALSE", "True/False for debugging purposes.") do |debug_value|
    options[:debug_value] = debug_value
  end
end.parse!

###################
#
# Set up the project's machine name.
# Create a build_server object
#
###################

project_machine_name = options[:project_name].downcase.gsub(/\s/,'_')
namespace_git = options[:namespace].downcase.gsub(/\s/,'-')

build = BuildServer.new(options[:build_server_user],options[:build_server_password],options[:build_server_ip],project_machine_name,namespace_git)
#set the notifier email in the build object
build.set_notifier(options[:notifier_email])

###################
#
# The following small piece of code will check what branches the user chose.
#
# If it's -a then all standard branches will be created
# Otherwise it will create the one that have been chosen by the user.
#
###################
branch_arr = []

if options[:all]
  branch_arr = ["staging","acc","prod"]
  branch_build_arr = ["master","acc","prod","staging"]
elsif options[:branches].length > 0
  branch_arr = options[:branches].split(',')
  branch_build_arr = options[:branches].split(',')
else
  puts "No branches defined. Will only provision master branch."
end

#set envs for the build object
build.set_environment(branch_build_arr)

###################
#
# The following two requests will allow us to communicate with the gitlab server API
# The first will try to get the ID of the namespace that we specified in the parameters. If this ID cannot be found, we will abort gitify.
#
# The second request will create a repository (through the API of gitlab) based on the specified options.
#
###################

#
# The base url
#

http = Net::HTTP.new("http://#{options[:gitlab_url]}")

puts "Getting namespace ID..."
uri_groups = URI.parse("http://#{options[:gitlab_url]}/api/v3/groups?private_token=#{options[:token]}")
http_groups = Net::HTTP.new(uri_groups.host, uri_groups.port)
request_groups = Net::HTTP::Get.new(uri_groups.request_uri)

response_groups = http_groups.request(request_groups)

groups_json = JSON.parse(response_groups.body)
groups_json.each do |item|
  if item["name"] == options[:namespace]
    namespace_id = item["id"]
  end
end

if namespace_id == 0
  puts "Namespace has not been found on the git-server!".red
  abort()
end

puts "Creating repository..."
uri_repo = URI.parse("http://#{options[:gitlab_url]}/api/v3/projects?private_token=#{options[:token]}")
http_repo = Net::HTTP.new(uri_repo.host, uri_repo.port)
request_repo = Net::HTTP::Post.new(uri_repo.request_uri)
request_repo.set_form_data({
  "name" => project_machine_name,
  "namespace_id" => namespace_id
})

response_repo = http_repo.request(request_repo)

#
#We will need to unprotect the master branch
#

repo_id = 0
repo_json = JSON.parse(response_repo.body)
repo_json.each do |item|
  repo_id = item[0]['id']
end

puts "Removing master branch protection."
uri_branch = URI.parse("http://#{options[:gitlab_url]}/api/v3/projects/#{repo_id}/repository/branches/master/unprotect?private_token=#{options[:token]}")
http_branch = Net::HTTP.new(uri_branch.host, uri_branch.port)
request_branch = Net::HTTP::Put.new(uri_branch.request_uri)

response_branch = http_branch.request(request_branch)
#
#End of removing the protection.
#

namespace = options.has_key?(:namespace) ? options[:namespace] + "/" : ""
project_type = options.has_key?(:type) ? options[:type] : "drupal"

if options.has_key?(:debug_value)
  debug_c = " --debugging= + #{options[:debug_value]}"
else
  debug_c = ''
end

###################
#
# This last piece of code will clone the repository
# - Create the master branch and put all files in it
# - Create all other branches and push them to the repository server.
#
###################
location = Dir.pwd


output_git_clone = `cd #{location} && git clone git@#{options[:gitlab_url]}:#{namespace_git}/#{project_machine_name}`
if $?.success?
  output_projectify_master = `cd #{project_machine_name} && projectify --type=#{options[:type]} --project_name=#{project_machine_name} --host_name=#{options[:domain]} #{debug_c}`
  puts output_projectify_master
  output_commit_master = `cd #{project_machine_name} && git add . && git commit -am "Initial structure" && git push origin master`
  branch_arr.each do |branch|
    output_branch = `cd #{project_machine_name} && git branch #{branch} && git checkout #{branch} && git push origin #{branch}`
  end

  build.add_build_jobs()
  FileUtils.rm_rf(project_machine_name)
else
  puts "Something went horribly wrong."
end
