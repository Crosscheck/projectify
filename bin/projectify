#!/usr/bin/env ruby
require 'optparse'
require 'projectify'
require 'colorize'
require 'logging'
options = {}
logs = Logging.new(true)
location = Dir.pwd

###################
#
# We will parse all possible options in the following block of code
#
###################

OptionParser.new do |opts|
  opts.banner = "Usage: projectify [options]"

  opts.on("-t", "--type=type", "Define the type for your project (general/drupal/capistrano). If this is empty, drupal will be used.") do |project_type|
    options[:project_type] = project_type
  end

  opts.on("-p", "--project_name=PROJECTNAME", "Define the project name for your project. If this is empty, \"CrossCheck\" will be used.") do |project_name|
    options[:project_name] = project_name
  end

  opts.on("-h", "--host_name=DOMAIN", "Define the local domain for your project. If this is empty, PROJECTNAME.dev will be used.") do |domain|
    options[:domain] = domain
  end

  opts.on("-v", "--debugging=TRUE/FALSE", "Define debugging true or false.") do |debug_value|
    options[:debug_value] = debug_value
  end
end.parse!


options[:site_name] = options[:domain].split('.')[0]


########## Parameters container #########
#
# We build our parameters container here.
#
########################################
param={}
param[:project_name] = options[:project_name]
param[:site_name] = options[:site_name]
param[:site_host] = options[:domain]

########## Option checks ##########

# Make project_name required.
if options[:project_name].length <= 1
    puts "You have to define a project name!".red
end

# Default project_type to drupal.
if options[:project_type].length <= 1
    puts "You have to define a project type!".red
end

########## END Option checks ##########
puts "Generating structure in #{location}"
projectify = Projectify.new(options[:debug_value], param, location)


########## Basic directory structure ##########
#
# In the following block of code we will try to create all necessary directories
# this will use different functions from the Projectify class (projectify.rb)
#
###############################################

puts "Creating directory structure"

if projectify.create_structure("node_modules")
  puts "Creating node_modules directory... [" + "SUCCESS".green + "]"
 else
  puts "Creating node_modules directory... [" + "FAILED".red + "]"
end

if projectify.create_structure("etc/solr")
  puts "Creating solr configuration directory... [" + "SUCCESS".green + "]"
 else
  puts "Creating solr configuration directory... [" + "FAILED".red + "]"
end
########## END Basic Directory Structure ##########

########## Basic File Structure ##########
#
# In the following block of code we will try to create all necessary files in their seperate directories
# this will use different functions from the Projectify class (projectify.rb)
#
###############################################

projectify.fetch_projectify_extra_files_skeleton("Crosscheck", "projectify-extra-files.git")
projectify.create_vagrant_files("ONEAgency", "drupical.git")
projectify.drush_make()
projectify.symlink_site_directory()
projectify.create_boilerplate_theme("Crosscheck", "Ocelot.git")
