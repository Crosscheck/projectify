#!/usr/bin/env ruby
require 'optparse'
require 'projectify'
require 'colorize'
require 'logging'
options = {}
logs = Logging.new(true)

###################
#
# We will parse all possible options in the following block of code
#
###################

OptionParser.new do |opts|
  opts.banner = "Usage: projectify [options]"

  opts.on("-t", "--type=type", "Define the type for your project (general/drupal/capistrano). If this is empty, drupal will be used.") do |project_type|
    options[:project_type] = project_type
  end
  
  opts.on("-d", "--directory=DIRECTORY", "Define the directory for this project. This is required!.") do |directory|
    options[:directory] = directory
  end
    
  opts.on("-p", "--project_name=PROJECTNAME", "Define the project name for your project. If this is empty, \"CrossCheck\" will be used.") do |project_name|
    options[:project_name] = project_name
  end
    
  opts.on("-h", "--host_name=DOMAIN", "Define the local domain for your project. If this is empty, PROJECTNAME.dev will be used.") do |domain|
    options[:domain] = domain
  end

  opts.on("-v", "--vagrant_url=URL", "Define the URL for a vagrant repository.") do |vagrant|
    options[:vagrant] = vagrant
  end

  opts.on("-v", "--debugging=TRUE/FALSE", "Define debugging true or false.") do |debug_value|
    options[:debug_value] = debug_value
  end
end.parse!

projectify = Projectify.new(options[:debug_value])
options[:site_name] = options[:domain].split('.')[0]


########## Parameters container #########
#
# We build our parameters container here.
#
########################################
param={}
param[:project_name] = options[:project_name]
param[:site_name] = options[:site_name]
param[:site_host] = options[:domain]

########## Option checks ##########
if options[:directory].length <= 0
    puts "You have to define a directory!".red
    exit
end

if options[:project_name].length <= 1
    puts "You have to define a project name!".red
end
########## END Option checks ##########

########## Basic directory structure ##########
#
# In the following block of code we will try to create all necessary directories
# this will use different functions from the Projectify class (projectify.rb)
#
###############################################
location = ""

if options[:directory].include? "."
  if options[:directory].include? "/"
    location = options[:directory]
    if options[:directory][-1, 1] != "/"
      location = location + "/"
    end
  else
    location = options[:directory] + "/"
  end
end

puts "Creating directory structure"
if options.has_key?(:project_type)
    if options[:project_type] == "drupal"
      if projectify.create_dir_drupal(location) == true
        puts "Creating drupal directory structure succeeded [" + "SUCCES".green + "]"
      else
        puts "Creation of drupal directory structure failed [" + "ERROR".red + "]"
      end
    elsif options[:project_type] == "capistrano"
      if projectify.create_dir_default(location) == true
        puts "Creating default directory structure succeeded [" + "SUCCES".green + "]"
      else
        puts "Creation of default directory structure failed [" + "ERROR".red + "]"
      end
    else
      if projectify.create_dir_drupal(location) == true
        puts "Creating drupal directory structure succeeded [" + "SUCCES".green + "]"
      else
        puts "Creation of drupal directory structure failed [" + "ERROR".red + "]"
      end
    end
else
    if projectify.create_dir_drupal(location) == true
        puts "Creating drupal directory structure succeeded [" + "SUCCES".green + "]"
    else
        puts "Creation of drupal directory structure failed [" + "ERROR".red + "]"
    end  
end

if !options.has_key? (:vagrant)
  if projectify.create_structure(location + "vagrant")
    puts "Creating vagrant directory... [" + "SUCCESS".green + "]"
   else
    puts "Creating vagrant directory... [" + "FAILED".red + "]"
  end
end
if projectify.create_structure(location + "docroot")
  puts "Creating docroot directory... [" + "SUCCESS".green + "]"
 else
  puts "Creating docroot directory... [" + "FAILED".red + "]"
end

if projectify.create_structure(location + "node_modules")
  puts "Creating node_modules directory... [" + "SUCCESS".green + "]"
 else
  puts "Creating node_modules directory... [" + "FAILED".red + "]"
end

if projectify.create_structure(location + "scripts")
  puts "Creating scripts directory... [" + "SUCCESS".green + "]"
 else
  puts "Creating scripts directory... [" + "FAILED".red + "]"
end

########## END Basic Directory Structure ##########

########## Basic File Structure ##########
#
# In the following block of code we will try to create all necessary files in their seperate directories
# this will use different functions from the Projectify class (projectify.rb)
#
###############################################

if projectify.create_script_directories(location)
    puts "Creating specific directory structures... [" + "SUCCESS".green + "]"
else
    puts "Creating specific directory structures... [" + "FAILED".red + "]"    
end

if projectify.create_script_files(location, param)
    puts "Creating script files... [" + "SUCCESS".green + "]"
else
    puts "Creating script files... [" + "FAILED".red + "]"    
end

if projectify.create_varnish_files(location, param)
    puts "Creating varnish files... [" + "SUCCESS".green + "]"
else
    puts "Creating varnish files... [" + "FAILED".red + "]"    
end

if projectify.create_gem_files(location, param)
    puts "Creating gem files... [" + "SUCCESS".green + "]"
else
    puts "Creating gem files... [" + "FAILED".red + "]"    
end

if projectify.create_npm_files(location, param)
    puts "Creating npm files... [" + "SUCCESS".green + "]"
else
    puts "Creating npm files... [" + "FAILED".red + "]"    
end
if options.has_key? (:vagrant)
  if projectify.create_vagrant_files(location, param, options[:vagrant])
    puts "Creating vagrant files... [" + "SUCCESS".green + "]"
  else
    puts "Creating vagrant files... [" + "FAILED".red + "]"
  end
end

##########################################

system("cd " + location + ";drush make scripts/" + param[:project_name] + ".make")
if $?.success?
  logs.Success("Drush make succeeded")
else
  logs.Error("Drush make failed")
end